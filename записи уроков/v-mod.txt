 
      Vue также предоставляет директиву v-model, которая реализует двустороннюю привязку между элементом формы и состоянием приложения:
      @input="insertData($event.target.value) 
       methods: {
        insertData(vel){
          this.userName = vel
        }
    }      => v-model = userName - просто надо добавить в тег 

      https://v3.ru.vuejs.org/ru/guide/introduction.html#%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D1%81%D0%BA%D0%B8%D0%BC-%D0%B2%D0%B2%D0%BE%D0%B4%D0%BE%D0%BC

    ==============================================
     директиву v-for можно использовать для отображения списка элементов, используя данные из массива. Цикл 
   */

   /* 
    v-if
    
     https://v3.ru.vuejs.org/ru/guide/introduction.html#%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D1%81%D0%BA%D0%B8%D0%BC-%D0%B2%D0%B2%D0%BE%D0%B4%D0%BE%D0%BC
    */


====================================================

v-model является директивой во Vue.js, которая обеспечивает двустороннюю привязку данных между 
элементом формы и состоянием Vue-компонента. Это означает, что изменения в элементе формы автоматически 
отражаются в данных Vue-компонента, и наоборот. v-model используется для работы с элементами формы, 
такими как input, textarea и select.

Пример использования v-model с <input>:

<input type="text" v-model="message">

В этом примере значение, введенное пользователем в поле ввода, будет автоматически привязано 
к переменной message в данных Vue-компонента. Если значение переменной message изменится в коде Vue.js,
 то значение в поле ввода также изменится.

v-model также поддерживает модификаторы, которые позволяют более тонко настраивать его поведение. 
Например, .lazy для отложенного обновления данных, .trim для автоматического удаления 
начальных и конечных пробелов и т.д.